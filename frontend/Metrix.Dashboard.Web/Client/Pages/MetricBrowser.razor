@page "/metric/browser"
@using Metrix.Models
@using Metrix.Http
@using Metrix.Models.Frontend
@using System.Timers
@using Metrix.Models.Backend
@implements IAsyncDisposable

<h3>Metric Browser</h3>

<EditForm EditContext="_editContext">
    <div class="grid-x">
        <div class="cell medium-6 large-4">
            <div class="card">
                <div class="card-section">
                    <h5 class="mb-2">Options</h5>
                    <InputSelect class="form-select mb-2"
                                 ValueChanged="@((string value) => OnDataGroupChange(value))"
                                 ValueExpression="@(() => _model.SelectedDataGroup)"
                                 Value="@_model.SelectedDataGroup">
                        @foreach (var grouping in _dataGroupings)
                        {
                            <option value="@grouping">@grouping</option>
                        }
                    </InputSelect>
                    <InputSelect class="form-select mb-2" 
                                 ValueChanged="@((string value) => OnDataPointChange(value))"
                                 ValueExpression="@(() => _model.SelectedDataPoint)"
                                 Value="@_model.SelectedDataPoint">
                        @foreach (var point in _dataPoints)
                        {
                            <option value="@point">@point</option>
                        }
                    </InputSelect>
                    <div class="mb-2">
                        <label>Start Date</label>
                        <InputDate class="form-control mb-sm-1" @bind-Value="_model.StartDate"></InputDate>
                        <input class="form-control mb-sm-1" type="time" @bind="_model.StartTime" />
                    </div>
                    <div class="mb-2">
                        <label>End Date</label>
                        <InputDate class="form-control mb-sm-1" @bind-Value="_model.EndDate"></InputDate>
                        <input class="form-control mb-sm-1" type="time" @bind="_model.EndTime" />
                    </div>
                    <div class="mb-2">
                        <fieldset>
                            <label>Synchronize End Time</label>
                            <InputCheckbox class="form-control mb-sm-1" @bind-Value="_model.SyncEndTime"></InputCheckbox>
                        </fieldset>
                    </div>
                    <div class="mb-2">
                        <label>Refresh Interval (ms)</label>
                        <InputNumber class="form-control mb-sm-1" @bind-Value="_updateTimer.Interval"></InputNumber>
                    </div>
                </div>
            </div>
        </div>
        <div class="cell medium-6 large-8">
            <div class="card">
                <div class="card-section">
                    <h5>@_model.SelectedDataGroup - @_model.SelectedDataPoint</h5>
                    <canvas id="chart-body"></canvas>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@inject IJSRuntime _js
@inject HttpClient _client
@inject MetrixClient _metrixClient

@code {
    private List<string> _dataGroupings;
    private List<string> _dataPoints;
    private MetricBrowserModel _model;
    private EditContext _editContext;
    private List<MetricResult> _graphData;
    private IJSObjectReference _chartModule;
    private Timer _updateTimer;

    public MetricBrowser()
    {
        _model = new MetricBrowserModel();
        _editContext = new EditContext(_model);
        _dataGroupings = new List<string>();
        _dataPoints = new List<string>();
        _graphData = new List<MetricResult>();
        _updateTimer = new Timer
        {
            AutoReset = true,
            Interval = 10000
        };
        _updateTimer.Elapsed += OnTimerElapsed;
        _updateTimer.Enabled = true;
    }

    protected async void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (_model.SyncEndTime)
        {
            _model.RefreshEndTime();
        }
        await LoadGraph();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _chartModule = await _js.InvokeAsync<IJSObjectReference>("import",
            "./js/metric-browser/chart.js");
            await _chartModule.InvokeVoidAsync("initializeChart");
            await LoadGraph();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _dataGroupings = await _metrixClient.GetMetricDataGroupings();
        _model.SelectedDataGroup = _dataGroupings[0];
        _dataPoints = await _metrixClient.GetMetricDataPointsForGrouping(_model.SelectedDataGroup);
        _model.SelectedDataPoint = _dataPoints[0];
    }

    private async Task OnDataGroupChange(string value)
    {
        _model.SelectedDataGroup = value;
        _dataPoints = await _metrixClient.GetMetricDataPointsForGrouping(_model.SelectedDataGroup);
        await LoadGraph();
    }

    private async Task OnDataPointChange(string value)
    {
        _model.SelectedDataPoint = value;
        await LoadGraph();
    }

    private async Task LoadGraph()
    {
        if (_model.EndDate != null && _model.StartDate != null && _model.EndTime != null && _model.StartTime != null)
        {
            var query = new MetricRangeQuery
            {
                MetricQuery = new MetricQuery
                {
                    DataGrouping = _model.SelectedDataGroup,
                    DataPoint = _model.SelectedDataPoint
                },
                StartDate = new DateTime(
                    _model.StartDate.Value.Year,
                    _model.StartDate.Value.Month,
                    _model.StartDate.Value.Day,
                    _model.StartTime.Value.Hour,
                    _model.StartTime.Value.Minute,
                    _model.StartTime.Value.Second),
                EndDate = new DateTime(
                    _model.EndDate.Value.Year,
                    _model.EndDate.Value.Month,
                    _model.EndDate.Value.Day,
                    _model.EndTime.Value.Hour,
                    _model.EndTime.Value.Minute,
                    _model.EndTime.Value.Second)
            };

            var series = await _metrixClient.GetMetricSeries(query);
            _graphData = series;

            await _chartModule.InvokeVoidAsync("drawChart", series);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_chartModule is not null)
        {
            await _chartModule.DisposeAsync();
        }
    }
}
